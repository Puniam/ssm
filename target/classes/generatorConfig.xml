<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
 <properties resource="generator.properties"></properties>
 <classPathEntry location="${jdbc.driverLocation}"/>


    <!--
    defaultModelType:**这个属性很重要**，这个属性定义了MBG如何生成**实体类**。

这个属性有以下可选值：

conditional:*这是默认值*,这个模型和下面的hierarchical类似，
除了如果那个单独的类将只包含一个字段，将不会生成一个单独的类。
因此,如果一个表的主键只有一个字段,那么不会为该字段生成单独的实体类,会将该字段合并到基本实体类中。

flat:该模型为每一张表只生成一个实体类。
这个实体类包含表中的所有字段。**这种模型最简单，推荐使用。**

hierarchical:如果表有主键,那么该模型会产生一个单独的主键实体类,
如果表还有BLOB字段， 则会为表生成一个包含所有BLOB字段的单独的实体类,然后为所有其他的字段生成一个单独的实体类。 MBG会在所有生成的实体类之间维护一个继承关系。
    -->
 <context id="default" targetRuntime="Mybatis3" defaultModelType="flat" >



<commentGenerator>
    <!--阻止生成的注释含有时间戳-->
 <property name="suppressDate" value="true"/>
    <!--阻止生成注释-->
 <property name="suppressAllComments" value="true"/>
</commentGenerator>
  <jdbcConnection
          driverClass="${jdbc.driverClass}"
          connectionURL="${jdbc.connectionUrl}"
          userId="${jdbc.username}"
          password="${jdbc.password}">
  </jdbcConnection>
  <!--
  非必需，类型处理器，在数据库类型和java类型之间的转换控制

    如果精度>0或者长度>18，就会使用java.math.BigDecimal
    如果精度=0并且10<=长度<=18，就会使用java.lang.Long
    如果精度=0并且5<=长度<=9，就会使用java.lang.Integer
    如果精度=0并且长度<5，就会使用java.lang.Short

  -->
  <javaTypeResolver>
   <property name="forceBigDecimals" value="false"/>
  </javaTypeResolver>

     <!--
     targetPackage:生成实体类存放的包名，一般就是放在该包下。
     实际还会受到其他配置的影响(<table>中会提到)。

       targetProject:指定目标项目路径，使用的是文件系统的绝对路径。
     -->
  <javaModelGenerator targetPackage="org.excelProject.pojo"
                      targetProject="src/main/java">

      <!--
      constructorBased:该属性只对MyBatis3有效，如果true就会使用构造方法入参，
                        如果false就会使用setter方式。默认为false。

     enableSubPackages:如果true，MBG会根据catalog和schema来生成子包。
                        如果false就会直接用targetPackage属性。默认为false。

     immutable:该属性用来配置实体类属性是否可变，如果设置为true
                ，那么constructorBased不管设置成什么，都会使用构造方法入参，
                并且不会生成setter方法。如果为false，实体类属性就可以改变。默认为false。

      rootClass:设置所有实体类的基类。如果设置，需要使用类的全限定名称。
        并且如果MBG能够加载rootClass，那么MBG不会覆盖和父类中完全匹配的属性。匹配规则：

                    属性名完全相同
                    属性类型相同
                    属性有getter方法
                    属性有setter方法

        trimStrings:是否对数据库查询结果进行trim操作，
                    如果设置为true就会生成类似这样
                    public void setUsername(String username)
                    {this.username = username == null ? null : username.trim();}
                    的setter方法。默认值为false。
      -->

   <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
   <property name="enableSubPackages" value="false" />
   <!-- 是否对model添加 构造函数 -->
   <property name="constructorBased" value="true"/>
   <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
   <property name="trimStrings" value="true"/>
   <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
   <property name="immutable" value="false"/>
  </javaModelGenerator>


     <!--
     如果targetRuntime目标是**iBATIS2**，该元素必须配置一个。

    如果targetRuntime目标是**MyBatis3**，只有当<javaClientGenerator>需要XML时，
    该元素必须配置一个。 如果没有配置<javaClientGenerator>，则使用以下的规则：
        .如果指定了一个<sqlMapGenerator>，那么MBG将只生成XML的SQL映射文件和实体类。
        .如果没有指定<sqlMapGenerator>，那么MBG将只生成实体类。
        该元素只有两个属性（和前面提过的<javaModelGenerator>的属性含义一样），都是必选的。

        targetPackage:生成实体类存放的包名，一般就是放在该包下。
                       实际还会受到其他配置的影响(<table>中会提到)。

        targetProject:指定目标项目路径，使用的是文件系统的绝对路径。
                        该元素支持<property>子元素，只有一个可以配置的属性：

         enableSubPackages:如果true，MBG会根据catalog和schema来生成子包。\
                            如果false就会直接用targetPackage属性。默认为false。
     -->

  <sqlMapGenerator targetPackage="mapper"
                   targetProject="src/main/resources">
   <property name="enableSubPackages" value="false"/>
  </sqlMapGenerator>

  <!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码
                type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
                type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
                type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口



                targetPackage:生成实体类存放的包名，一般就是放在该包下。
                            实际还会受到其他配置的影响(<table>中会提到)。

                targetProject:指定目标项目路径，使用的是文件系统的绝对路径。

                该元素还有一个可选属性：
                 implementationPackage:如果指定了该属性，实现类就会生成在这个包中。
                该元素支持<property>子元素设置的属性：

                enableSubPackages
                exampleMethodVisibility
                methodNameCalculator
                rootInterface
                useLegacyBuilder
                这几个属性不太常用，具体作用请看完整的文档，这里对rootInterface做个简单介绍。

            rootInterface用于指定一个所有生成的接口都继承的父接口。
            这个值可以通过<table>配置的rootInterface属性覆盖。
            这个属性对于通用Mapper来说，可以让生成的所有接口都继承该接口。
        -->
  <javaClientGenerator targetPackage="org.excelProject.dao"
                       targetProject="src/main/java" type="XMLMAPPER">
   <property name="enableSubPackages" value="true"/>
  </javaClientGenerator>

     <!--
     schema:数据库的schema,可以使用SQL通配符匹配。如果设置了该值，
            生成SQL的表名会变成如schema.tableName的形式。

    catalog:数据库的catalog，如果设置了该值，
            生成SQL的表名会变成如catalog.tableName的形式。

    alias:如果指定，这个值会用在生成的select查询SQL的表的别名和列名上。
          列名会被别名为 alias_actualColumnName(别名_实际列名) 这种模式。

    domainObjectName:生成对象的基本名称。如果没有指定，MBG会自动根据表名来生成名称。

    enableXXX:XXX代表多种SQL方法，该属性用来指定是否生成对应的XXX语句。

    selectByPrimaryKeyQueryId:DBA跟踪工具会用到，具体请看详细文档。

    selectByExampleQueryId:DBA跟踪工具会用到，具体请看详细文档。

    modelType:和<context>的defaultModelType含义一样，这里可以针对表进行配置，
              这里的配置会覆盖<context>的defaultModelType配置。

    escapeWildcards:这个属性表示当查询列，
                    是否对schema和表名中的SQL通配符 ('_' and '%') 进行转义。
                    对于某些驱动当schema或表名中包含SQL通配符时
                    （例如，一个表名是MY_TABLE，有一些驱动需要将下划线进行转义）是必须的。
                      默认值是false。


    delimitIdentifiers:是否给标识符增加**分隔符**。
                        默认false。当catalog,schema或tableName中包含空白时，默认为true。


    delimitAllColumns:是否对所有列添加**分隔符**。默认false。

    该元素包含多个可用的<property>子元素，可选属性为：

    constructorBased:和<javaModelGenerator>中的属性含义一样。

    ignoreQualifiersAtRuntime:生成的SQL中的表名将不会包含schema和catalog前缀。

    immutable:和<javaModelGenerator>中的属性含义一样。

    modelOnly:此属性用于配置是否为表只生成实体类。
                如果设置为true就不会有Mapper接口。如果配置了<sqlMapGenerator>，
                并且modelOnly为true，那么XML映射文件中只有实体对象的映射元素(<resultMap>)。
                如果为true还会覆盖属性中的enableXXX方法，将不会生成任何CRUD方法。

    rootClass:和<javaModelGenerator>中的属性含义一样。

    rootInterface:和<javaClientGenerator>中的属性含义一样。

    runtimeCatalog:运行时的catalog，当生成表和运行环境的表的catalog不一样的时候可以使用该属性进行配置。

    runtimeSchema:运行时的schema，当生成表和运行环境的表的schema不一样的时候可以使用该属性进行配置。

    runtimeTableName:运行时的tableName，当生成表和运行环境的表的tableName不一样的时候可以使用该属性进行配置。

    selectAllOrderByClause:该属性值会追加到selectAll方法后的SQL中，会直接跟order by拼接后添加到SQL末尾。

    useActualColumnNames:如果设置为true,那么MBG会使用从数据库元数据获取的列名作为生成的实体对象的属性。 如果为false(默认值)，MGB将会尝试将返回的名称转换为驼峰形式。 在这两种情况下，可以通过 元素显示指定，在这种情况下将会忽略这个（useActualColumnNames）属性。

    useColumnIndexes:如果是true,MBG生成resultMaps的时候会使用列的索引,而不是结果中列名的顺序。

    useCompoundPropertyNames:如果是true,那么MBG生成属性名的时候会将列名和列备注接起来.
                             这对于那些通过第四代语言自动生成列(例如:FLD22237),
                             但是备注包含有用信息(例如:"customer id")的数据库来说很有用.
                             在这种情况下,MBG会生成属性名FLD2237_CustomerId。
                            除了<property>子元素外，<table>还包含以下子元素：

    <generatedKey> (0个或1个)
    <columnRenamingRule> (0个或1个)
    <columnOverride> (0个或多个)
    <ignoreColumn> (0个或多个)

    1. <generatedKey> 元素

        这个元素最多可以配置一个。
        这个元素用来指定自动生成主键的属性（identity字段或者sequences序列）。
        如果指定这个元素，MBG在生成insert的SQL映射文件中插入一个<selectKey>元素。
         这个元素**非常重要**，这个元素包含下面两个必选属性：

        column:生成列的列名。
        sqlStatement:将返回新值的 SQL 语句。如果这是一个identity列，
        您可以使用其中一个预定义的的特殊值。预定义值如下：
                                    Cloudscape
                                    DB2
                                    DB2_MF
                                    Derby
                                    HSQLDB
                                    Informix
                                    MySql
                                    SqlServer
                                    SYBASE
            JDBC:这会配置MBG使用MyBatis3支持的JDBC标准的生成key来生成代码。
             这是一个独立于数据库获取标识列中的值的方法。
             重要: 只有当目标运行为MyBatis3时才会产生正确的代码。
             如果与iBATIS2一起使用目标运行时会产生运行时错误的代码。
            这个元素还包含两个可选属性：

identity:当设置为true时,该列会被标记为identity列， 并
        且<selectKey>元素会被插入在insert后面。 当设置为false时，
        <selectKey>会插入到insert之前（通常是序列）。
        **重要**: 即使您type属性指定为post，您仍然需要为identity列将该参数设置为true。
         这将标志MBG从插入列表中删除该列。默认值是false。

type:type=post and identity=true的时候生成的<selectKey>中的order=AFTER,
                当type=pre的时候，identity只能为false，生成的<selectKey>中的order=BEFORE。
                可以这么理解，自动增长的列只有插入到数据库后才能得到ID，所以是AFTER,使用序列时，
                只有先获取序列之后，才能插入数据库，所以是BEFORE。


                 2.<columnRenamingRule> 元素

该元素最多可以配置一个，使用该元素可以在生成列之前，对列进行重命名。
这对那些存在同一前缀的字段想在生成属性名时去除前缀的表非常有用。
例如假设一个表包含以下的列：

CUST_BUSINESS_NAME
CUST_STREET_ADDRESS
CUST_CITY
CUST_STATE
生成的所有属性名中如果都包含CUST的前缀可能会让人不爽。这些前缀可以通过如下方式定义重命名规则:

<columnRenamingRule searchString="^CUST_" replaceString="" />
注意，在内部，MBG使用java.util.regex.Matcher.replaceAll方法实现这个功能。
请参阅有关该方法的文档和在Java中使用正则表达式的例子。

当<columnOverride>匹配一列时，这个元素（<columnRenamingRule>）会被忽略。
<columnOverride>优先于重命名的规则。

该元素有一个必选属性：

searchString:定义将被替换的字符串的正则表达式。
该元素有一个可选属性：

replaceString:这是一个用来替换搜索字符串列每一个匹配项的字符串。如果没有指定，就会使用空字符串。
关于<table>的<property>属性useActualColumnNames对此的影响可以查看完整文档。

3. <columnOverride> 元素

该元素可选，可以配置多个。

该元素从将某些属性默认计算的值更改为指定的值。

该元素有一个必选属性:

column:要重写的列名。
该元素有多个可选属性：

property:要使用的Java属性的名称。如果没有指定，MBG会根据列名生成。
例如，如果一个表的一列名为STRT_DTE，MBG会根据<table>的useActualColumnNames属性生成STRT_DTE或strtDte。

javaType:该列属性值为完全限定的Java类型。如果需要，这
可以覆盖由JavaTypeResolver计算出的类型。 对某些数据库来说，
这是必要的用来处理**“奇怪的”**数据库类型
（例如MySql的unsigned bigint类型需要映射为java.lang.Object)。

jdbcType:该列的JDBC类型(INTEGER, DECIMAL, NUMERIC, VARCHAR等等)。
 如果需要，这可以覆盖由JavaTypeResolver计算出的类型。 对某些数据库来说，
 这是必要的用来处理怪异的JDBC驱动 (例如DB2的LONGVARCHAR类型需要为iBATIS 映射为VARCHAR)。
typeHandler:用户定义的需要用来处理这列的类型处理器。
它必须是一个继承iBATIS的TypeHandler类或TypeHandlerCallback接口
（该接口很容易继承）的全限定的类名。如果没有指定或者是空白，
iBATIS会用默认的类型处理器来处理类型。
**重要**:MBG不会校验这个类型处理器是否存在或者可用。
 MGB只是简单的将这个值插入到生成的SQL映射的配置文件中。

delimitedColumnName:指定是否应在生成的SQL的列名称上增加**分隔符**。
如果列的名称中包含空格，MGB会自动添加**分隔符**，
所以这个重写只有当列名需要强制为一个合适的名字或者列名是数据库中的保留字时是必要的。


4. <ignoreColumn> 元素

该元素可选，可以配置多个。

该元素可以用来屏蔽不需要生成的列。

该元素有一个必选属性：

column:要忽略的列名。
该元素还有一个可选属性：

delimitedColumnName:匹配列名的时候是否区分大小写。如果为true则区分。
默认值为false，不区分大小写。
     -->


<table tableName="test"   domainObjectName="TestPojo"
       enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false"
       enableSelectByExample="false" selectByExampleQueryId="false"
>
    <!--identity=true 在插入后把id赋值给对象-->
    <generatedKey column="id" sqlStatement="Mysql" identity="true"/>


</table>


 </context>



</generatorConfiguration>